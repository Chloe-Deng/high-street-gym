import { Router } from 'express';
import auth from '../middleware/auth.js';
import * as Classes from '../models/classes.js';
import * as ClassDetails from '../models/classDetails.js';

const classController = Router();

classController.get('/', async (req, res) => {
  const classes = await Classes.getClasses();

  res.status(200).json({
    status: 'Success',
    message: 'Get all classes',
    data: classes,
  });
});

classController.get('/details', async (req, res) => {
  const classes = await ClassDetails.getClassDetails();

  res.status(200).json({
    status: 'Success',
    message: 'Get all classes with trainers and locations',
    result: classes.length,
    data: classes,
  });
});

/*
classController.get("/:id", async (req, res) => {
  const classID = req.params.id;

  // Implement request validation
  if (!classID || isNaN(parseInt(classID)) || parseInt(classID) < 1) {
    return res.status(400).json({
      status: 400,
      message: "Invalid class ID provided.",
    });
  }
  */

classController.get('/:id', async (req, res) => {
  const classID = req.params.id;

  // Implement request validation
  if (!classID || isNaN(parseInt(classID)) || parseInt(classID) < 1) {
    return res.status(400).json({
      status: 400,
      message: 'Invalid class ID provided.',
    });
  }

  try {
    const classInfo = await ClassDetails.getClass(classID);
    if (classInfo) {
      res.status(200).json({
        status: 200,
        message: 'Get class by ID',
        data: classInfo,
      });
    } else {
      // 如果没有找到对应的课程信息，返回 404 Not Found
      res.status(404).json({
        status: 404,
        message: 'Class not found',
      });
    }
  } catch (error) {
    // 在实际应用中，最好记录这些错误或更详细地处理它们
    console.error('Error fetching class by ID:', error);
    res.status(500).json({
      status: 500,
      message: 'Failed to get class by ID',
    });
  }
});

classController.post('/', auth(['admin', 'trainer']), async (req, res) => {
  // Get the class data out of the request
  const classData = req.body;

  // Implement request validation
  if (
    !classData.activityName ||
    !classData.startDate ||
    !classData.startTime ||
    !classData.locationName ||
    !classData.trainerName
  ) {
    return res.status(400).json({
      status: 400,
      message: 'Missing required class information',
    });
  }

  try {
    // Directly pass classData to createClass function
    const createdClass = await ClassDetails.createClass(classData);

    res.status(201).json({
      status: 201,
      message: 'Created new class',
      data: createdClass,
    });
  } catch (error) {
    console.error('Failed to create new class:', error.message);
    res.status(500).json({
      status: 500,
      message: 'Failed to create new class: ' + error.message,
    });
  }
});

/*
classController.post("/", async (req, res) => {
  // Get the class data out of the request
  const classData = req.body;

  // TODO: Implement request validation
  // You should validate the incoming data before processing it.
  // Ensure required fields are present and have valid data.
  if (!classData) return;

  try {
    // Convert the class data into a class model object
    // Assuming newClass is a method to create a class object
    const newClass = Classes.newClass(
      null, // Assuming the `id` will be auto-generated by the database
      classData.className,
      classData.datetime,
      classData.startAt,
      classData.duration,
      classData.description,
      classData.locationID,
      classData.trainerID,
    );

    // Use the create model function to insert this class into the DB
    // Assuming create is an async method
    const createdClass = await Classes.createClass(newClass);

    res.status(201).json({
      status: 201,
      message: "Created new class",
      data: createdClass,
    });
  } catch (error) {
    console.error("Failed to create new class:", error);
    res.status(500).json({
      status: 500,
      message: "Failed to create new class",
    });
  }
});
*/

// classController.patch("/:id", async (req, res) => {
//   const classId = req.params.id;
//   const updateData = { ...req.body, id: classId }; // 合并请求体数据和 URL 中的类 ID

//   try {
//     const result = await Classes.update(updateData);
//     console.log(result.rows);
//     if (result.affectedRows === 0) {
//       // 假设使用的数据库返回一个 affectedRows 属性来表示受影响的行数
//       return res.status(404).json({
//         status: 404,
//         message: "Class not found",
//       });
//     }

//     res.json({
//       status: 200,
//       message: "Class updated successfully",
//     });
//   } catch (error) {
//     console.error("Failed to update class:", error);
//     res.status(500).json({
//       status: 500,
//       message: "Failed to update class",
//     });
//   }
// });

classController.patch('/:id', async (req, res) => {
  const classId = req.params.id;
  const updateData = req.body; // 假设所有更新数据都在请求体中
  // console.log(Object.keys(updateData));

  if (!updateData || Object.keys(updateData).length === 0) {
    return res.status(400).json({
      status: 400,
      message: 'No update data provided',
    });
  }

  try {
    await ClassDetails.updateById(classId, updateData);
    // console.log(result);
    res.json({
      status: 200,
      message: 'Class updated successfully',
    });
  } catch (error) {
    console.error('Failed to update class:', error.message);
    res.status(500).json({
      status: 500,
      message: error.message,
    });
  }
});

classController.delete('/:id', auth(['admin', 'trainer']), async (req, res) => {
  const classId = req.params.id;

  // TODO: 这里可以添加更详细的请求验证，例如检查 classId 是否为有效的数字

  try {
    const affectedRows = await Classes.deleteById(classId);
    if (affectedRows === 0) {
      // 如果没有找到记录或者没有记录被删除，返回 404
      return res.status(404).json({
        status: 404,
        message: 'Class not found',
      });
    }

    // 成功删除记录，返回成功响应
    res.status(200).json({
      status: 200,
      message: 'Class deleted successfully',
    });
  } catch (error) {
    console.error('Failed to delete class:', error);
    // 处理可能的错误，例如数据库错误
    res.status(500).json({
      status: 500,
      message: 'Failed to delete class',
    });
  }
});

export default classController;
